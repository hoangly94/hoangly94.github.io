import{getErrorMessage,logMessage}from"./helpers";export class QuotesPulseProvider{constructor(s){this._subscribers={},this._requestsPending=0,this._quotesProvider=s,setInterval(this._updateQuotes.bind(this,1),1e4),setInterval(this._updateQuotes.bind(this,0),6e4)}subscribeQuotes(s,e,t,r){this._subscribers[r]={symbols:s,fastSymbols:e,listener:t},logMessage(`QuotesPulseProvider: subscribed quotes with #${r}`)}unsubscribeQuotes(s){delete this._subscribers[s],logMessage(`QuotesPulseProvider: unsubscribed quotes with #${s}`)}_updateQuotes(s){if(!(this._requestsPending>0))for(const e in this._subscribers){this._requestsPending++;const t=this._subscribers[e];this._quotesProvider.getQuotes(1===s?t.fastSymbols:t.symbols).then((r=>{this._requestsPending--,this._subscribers.hasOwnProperty(e)&&(t.listener(r),logMessage(`QuotesPulseProvider: data for #${e} (${s}) updated successfully, pending=${this._requestsPending}`))})).catch((t=>{this._requestsPending--,logMessage(`QuotesPulseProvider: data for #${e} (${s}) updated with error=${getErrorMessage(t)}, pending=${this._requestsPending}`)}))}}}